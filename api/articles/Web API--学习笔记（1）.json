{"title":"Web API--学习笔记（1）","slug":"Web API--学习笔记（1）","date":"2024-05-28T16:00:00.000Z","updated":"2024-10-19T08:34:06.596Z","comments":true,"path":"api/articles/Web API--学习笔记（1）.json","excerpt":"简介应用程序接口（API，Application Programming Interface）是基于编程语言构建的结构，使开发人员更容易地创建复杂的功能。它们抽象了复杂的代码，并提供一些简单的接口规则直接使用。","covers":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><div id=\"vip-container\"><h2 id=\"简介\">简介</h2>\n<p>应用程序接口（<strong>API</strong>，Application Programming Interface）是基于编程语言构建的结构，使开发人员更容易地创建复杂的功能。它们抽象了复杂的代码，并提供一些简单的接口规则直接使用。</p>\n<span id=\"more\"></span> \n<blockquote>\n<p>通常分为两类：</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>浏览器 API</strong>内置于 Web 浏览器中，能从浏览器和电脑周边环境中提取数据，并用来做有用的复杂的事情。例如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0dlb2xvY2F0aW9uX0FQSQ==\">Geolocation API<i class=\"fa fa-external-link-alt\"></i></span>提供了一些简单的 JavaScript 结构以获得位置数据，因此你可以在 Google 地图上标示你的位置。在后台，浏览器确实使用一些复杂的低级代码（例如 C++）与设备的 GPS 硬件（或可以决定位置数据的任何设施）通信来获取位置数据并把这些数据返回给你的代码中使用浏览器环境；但是，这种复杂性通过 API 抽象出来，因而与你无关。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>第三方 API</strong>缺省情况下不会内置于浏览器中，通常必须在 Web 中的某个地方获取代码和信息。例如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYudHdpdHRlci5jb20vb3ZlcnZpZXcvZG9jdW1lbnRhdGlvbg==\">Twitter API<i class=\"fa fa-external-link-alt\"></i></span> 使你能做一些显示最新推文这样的事情，它提供一系列特殊的结构，可以用来请求 Twitter 服务并返回特殊的信息。</p>\n</li>\n</ul>\n<blockquote>\n<p>浏览器 API 类别</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>操作文档的 API</strong>内置于浏览器中。最明显的例子是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0RvY3VtZW50X09iamVjdF9Nb2RlbA==\">DOM（文档对象模型）<i class=\"fa fa-external-link-alt\"></i></span>API，它允许你操作 HTML 和 CSS — 创建、移除以及修改 HTML，动态地将新样式应用到你的页面，等等。每当你看到一个弹出窗口出现在一个页面上，或者显示一些新的内容时，这都是 DOM 的行为。你可以在在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9MZWFybi9KYXZhU2NyaXB0L0NsaWVudC1zaWRlX3dlYl9BUElzL01hbmlwdWxhdGluZ19kb2N1bWVudHM=\">Manipulating documents<i class=\"fa fa-external-link-alt\"></i></span>中找到关于这些类型的 API 的更多信息。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>从服务器获取数据的 API</strong> 用于更新网页的一小部分是相当好用的。这个看似很小的细节能对网站的性能和行为产生巨大的影响 — 如果你只是更新一个股票列表或者一些可用的新故事而不需要从服务器重新加载整个页面将使网站或应用程序感觉更加敏感和“活泼”。使这成为可能的 API 包括<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0\">XMLHttpRequest<i class=\"fa fa-external-link-alt\"></i></span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ZldGNoX0FQSQ==\">Fetch API<i class=\"fa fa-external-link-alt\"></i></span>。你也可能会遇到描述这种技术的术语<strong>Ajax</strong>。你可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9MZWFybi9KYXZhU2NyaXB0L0NsaWVudC1zaWRlX3dlYl9BUElzL0ZldGNoaW5nX2RhdGE=\">Fetching data from the server<i class=\"fa fa-external-link-alt\"></i></span>找到关于类似的 API 的更多信息。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>用于绘制和操作图形的 API</strong>目前已被浏览器广泛支持 — 最流行的是允许你以编程方式更新包含在 HTML <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas\"><canvas></a> 元素中的像素数据以创建 2D 和 3D 场景的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0NhbnZhc19BUEk=\">Canvas<i class=\"fa fa-external-link-alt\"></i></span>和<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYkdMX0FQSQ==\">WebGL<i class=\"fa fa-external-link-alt\"></i></span>。例如，你可以绘制矩形或圆形等形状，将图像导入到画布上，然后使用 Canvas API 对其应用滤镜（如棕褐色滤镜或灰度滤镜），或使用 WebGL 创建具有光照和纹理的复杂 3D 场景。这些 API 经常与用于创建动画循环的 API（例如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dpbmRvdy9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU=\">window.requestAnimationFrame()<i class=\"fa fa-external-link-alt\"></i></span>）和其他 API 一起不断更新诸如动画和游戏之类的场景。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>音频和视频 API</strong> 例如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0hUTUxNZWRpYUVsZW1lbnQ=\">HTMLMediaElement<i class=\"fa fa-external-link-alt\"></i></span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9BdWRpb19BUEk=\">Web Audio API<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYlJUQ19BUEk=\">WebRTC<i class=\"fa fa-external-link-alt\"></i></span> 允许你使用多媒体来做一些非常有趣的事情，比如创建用于播放音频和视频的自定义 UI 控件，显示字幕字幕和你的视频，从网络摄像机抓取视频，通过画布操纵（见上），或在网络会议中显示在别人的电脑上，或者添加效果到音轨（如增益、失真、平移等） 。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>设备 API</strong>基本上是以对网络应用程序有用的方式操作和检索现代设备硬件中的数据的 API。我们已经讨论过访问设备位置数据的地理定位 API，因此你可以在地图上标注你的位置。其他示例还包括通过系统通知（参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL05vdGlmaWNhdGlvbnNfQVBJ\">Notifications API<i class=\"fa fa-external-link-alt\"></i></span>）或振动硬件（参见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1ZpYnJhdGlvbl9BUEk=\">Vibration API<i class=\"fa fa-external-link-alt\"></i></span>）告诉用户 Web 应用程序有用的更新可用。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>客户端存储 API</strong>在 Web 浏览器中的使用变得越来越普遍 - 如果你想创建一个应用程序来保存页面加载之间的状态，甚至让设备在处于脱机状态时可用，那么在客户端存储数据将会是非常有用的。例如使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL1dlYl9TdG9yYWdlX0FQSQ==\">Web Storage API<i class=\"fa fa-external-link-alt\"></i></span>的简单的键 - 值存储以及使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0luZGV4ZWREQl9BUEk=\">IndexedDB API<i class=\"fa fa-external-link-alt\"></i></span>的更复杂的表格数据存储。</p>\n</li>\n</ul>\n<blockquote>\n<p>第三方 API</p>\n</blockquote>\n<h2 id=\"API-如何工作？\">API 如何工作？</h2>\n<p>API 使用一个或多个 JavaScript objects 在你的代码中进行交互，这些对象用作 API 使用的数据（包含在对象属性中）的容器以及 API 提供的功能（包含在对象方法中）。</p>\n<h2 id=\"参考\">参考</h2>\n<ol>\n<li class=\"lvl-3\">\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9MZWFybi9KYXZhU2NyaXB0L0NsaWVudC1zaWRlX3dlYl9BUElzL0ludHJvZHVjdGlvbg==\">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li class=\"lvl-3\">\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zc3BhaS5jb20vcG9zdC84Nzg4NSMh\">https://sspai.com/post/87885#!<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"33502-1730425843713-524\",\n\t\t\t        \"name\": \"虫子的生存笔记\",\n\t\t\t        \"qrcode\": \"https://leaf-miner.pages.dev/image/%E5%85%AC%E4%BC%97%E5%8F%B7.png\",\n\t\t\t        \"keyword\": \"more\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","more":"<blockquote>\n<p>通常分为两类：</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>浏览器 API</strong>内置于 Web 浏览器中，能从浏览器和电脑周边环境中提取数据，并用来做有用的复杂的事情。例如<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation_API\">Geolocation API</a>提供了一些简单的 JavaScript 结构以获得位置数据，因此你可以在 Google 地图上标示你的位置。在后台，浏览器确实使用一些复杂的低级代码（例如 C++）与设备的 GPS 硬件（或可以决定位置数据的任何设施）通信来获取位置数据并把这些数据返回给你的代码中使用浏览器环境；但是，这种复杂性通过 API 抽象出来，因而与你无关。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>第三方 API</strong>缺省情况下不会内置于浏览器中，通常必须在 Web 中的某个地方获取代码和信息。例如<a href=\"https://dev.twitter.com/overview/documentation\">Twitter API</a> 使你能做一些显示最新推文这样的事情，它提供一系列特殊的结构，可以用来请求 Twitter 服务并返回特殊的信息。</p>\n</li>\n</ul>\n<blockquote>\n<p>浏览器 API 类别</p>\n</blockquote>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p><strong>操作文档的 API</strong>内置于浏览器中。最明显的例子是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model\">DOM（文档对象模型）</a>API，它允许你操作 HTML 和 CSS — 创建、移除以及修改 HTML，动态地将新样式应用到你的页面，等等。每当你看到一个弹出窗口出现在一个页面上，或者显示一些新的内容时，这都是 DOM 的行为。你可以在在<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents\">Manipulating documents</a>中找到关于这些类型的 API 的更多信息。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>从服务器获取数据的 API</strong> 用于更新网页的一小部分是相当好用的。这个看似很小的细节能对网站的性能和行为产生巨大的影响 — 如果你只是更新一个股票列表或者一些可用的新故事而不需要从服务器重新加载整个页面将使网站或应用程序感觉更加敏感和“活泼”。使这成为可能的 API 包括<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\">XMLHttpRequest</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API\">Fetch API</a>。你也可能会遇到描述这种技术的术语<strong>Ajax</strong>。你可以在<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data\">Fetching data from the server</a>找到关于类似的 API 的更多信息。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>用于绘制和操作图形的 API</strong>目前已被浏览器广泛支持 — 最流行的是允许你以编程方式更新包含在 HTML <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/canvas\"><canvas></a> 元素中的像素数据以创建 2D 和 3D 场景的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">Canvas</a>和<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API\">WebGL</a>。例如，你可以绘制矩形或圆形等形状，将图像导入到画布上，然后使用 Canvas API 对其应用滤镜（如棕褐色滤镜或灰度滤镜），或使用 WebGL 创建具有光照和纹理的复杂 3D 场景。这些 API 经常与用于创建动画循环的 API（例如<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\">window.requestAnimationFrame()</a>）和其他 API 一起不断更新诸如动画和游戏之类的场景。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>音频和视频 API</strong> 例如 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement\">HTMLMediaElement</a>、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Audio_API\">Web Audio API</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API\">WebRTC</a> 允许你使用多媒体来做一些非常有趣的事情，比如创建用于播放音频和视频的自定义 UI 控件，显示字幕字幕和你的视频，从网络摄像机抓取视频，通过画布操纵（见上），或在网络会议中显示在别人的电脑上，或者添加效果到音轨（如增益、失真、平移等） 。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>设备 API</strong>基本上是以对网络应用程序有用的方式操作和检索现代设备硬件中的数据的 API。我们已经讨论过访问设备位置数据的地理定位 API，因此你可以在地图上标注你的位置。其他示例还包括通过系统通知（参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Notifications_API\">Notifications API</a>）或振动硬件（参见<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Vibration_API\">Vibration API</a>）告诉用户 Web 应用程序有用的更新可用。</p>\n</li>\n<li class=\"lvl-2\">\n<p><strong>客户端存储 API</strong>在 Web 浏览器中的使用变得越来越普遍 - 如果你想创建一个应用程序来保存页面加载之间的状态，甚至让设备在处于脱机状态时可用，那么在客户端存储数据将会是非常有用的。例如使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API\">Web Storage API</a>的简单的键 - 值存储以及使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB API</a>的更复杂的表格数据存储。</p>\n</li>\n</ul>\n<blockquote>\n<p>第三方 API</p>\n</blockquote>\n<h2 id=\"API-如何工作？\">API 如何工作？</h2>\n<p>API 使用一个或多个 JavaScript objects 在你的代码中进行交互，这些对象用作 API 使用的数据（包含在对象属性中）的容器以及 API 提供的功能（包含在对象方法中）。</p>\n<h2 id=\"参考\">参考</h2>\n<ol>\n<li class=\"lvl-3\">\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction\">https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Client-side_web_APIs/Introduction</a></p>\n</li>\n<li class=\"lvl-3\">\n<p><a href=\"https://sspai.com/post/87885#!\">https://sspai.com/post/87885#!</a></p>\n</li>\n</ol>","categories":[{"name":"笔记","path":"api/categories/笔记.json"},{"name":"学习","path":"api/categories/学习.json"}],"tags":[{"name":"博客","path":"api/tags/博客.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"API","path":"api/tags/API.json"},{"name":"建站","path":"api/tags/建站.json"}]}