{"title":"RNA-Seq Count数据的标准化(RPKM, FPKM, TPM)-学习笔记","slug":"RNA-Seq Count数据的标准化(RPKM, FPKM, TPM)-学习笔记","date":"2023-09-21T07:37:35.000Z","updated":"2024-10-19T08:32:10.893Z","comments":true,"path":"api/articles/RNA-Seq Count数据的标准化(RPKM, FPKM, TPM)-学习笔记.json","excerpt":"测序得到的 read counts 数量会受到多种因素的影响，如 测序深度 和 基因长度 。除了上述两个主要因素外，还会有其他因素对read counts的检测有所影响，例如转录组的组成，GC含量，random hexamers引起的测序偏好等等。因此测序得到的read counts需要标准化后才能进行比较。标准化的方式有 RPKM ， FPKM， TPM 。其中TPM被更多人认可。","covers":["https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111816290.png","https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111831499.png","https://thereallda.github.io/2022/02/07/R-Retrieve-Gene-Length/paste-CBFC7C07.png"],"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><div id=\"vip-container\"><p>测序得到的 <strong>read counts</strong> 数量会受到多种因素的影响，如 <strong>测序深度</strong> 和 <strong>基因长度</strong> 。除了上述两个主要因素外，还会有其他因素对read counts的检测有所影响，例如转录组的组成，GC含量，random hexamers引起的测序偏好等等。因此测序得到的read counts需要标准化后才能进行比较。标准化的方式有 <strong>RPKM</strong> ， <strong>FPKM</strong>， <strong>TPM</strong> 。其中TPM被更多人认可。</p>\n<span id=\"more\"></span> \n<p><strong>RPKM:</strong> Reads per kilo base per million mapped reads (single-end sequencing)</p>\n<p><strong>FPKM:</strong> Fragments per kilo base per million mapped reads (paired-end sequencing)</p>\n<p>RPKM与FPKM实际上一样的单位，只不过RPKM是在单端测序文库中使用，而FPKM是双端测序所用的。对基因长度（gene length）以及测序深度（mapped reads from library）都进行了校正。<br>\n<img data-src=\"https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111816290.png\" alt=\"公式1\"></p>\n<h3 id=\"RPKM，FPKM\">RPKM，FPKM</h3>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#x为一个向量存储了每个基因的counts，而gene.length是相应于x中每个基因的长度的一个向量.</span></span><br><span class=\"line\">RPKM <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> gene.length<span class=\"punctuation\">)</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  lib.size <span class=\"operator\">&lt;-</span> <span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">  rpm <span class=\"operator\">&lt;-</span> 1e6 <span class=\"operator\">*</span> x<span class=\"operator\">/</span>lib.size</span><br><span class=\"line\">  rpkm <span class=\"operator\">&lt;-</span> 1e3 <span class=\"operator\">*</span> rpm<span class=\"operator\">/</span>gene.length</span><br><span class=\"line\">  <span class=\"built_in\">return</span><span class=\"punctuation\">(</span>rpkm<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">FPKM <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> gene.length<span class=\"punctuation\">)</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  lib.size <span class=\"operator\">&lt;-</span> <span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">  rpm <span class=\"operator\">&lt;-</span> 1e6 <span class=\"operator\">*</span> x<span class=\"operator\">/</span>lib.size</span><br><span class=\"line\">  rpkm <span class=\"operator\">&lt;-</span> 1e3 <span class=\"operator\">*</span> rpm<span class=\"operator\">/</span>gene.length</span><br><span class=\"line\">  <span class=\"built_in\">return</span><span class=\"punctuation\">(</span>fpkm<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"TPM\">TPM</h3>\n<p>TPM: Transcript per million<br>\n<img data-src=\"https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111831499.png\" alt=\"公式2\"></p>\n<p>TPM对基因的长度进行了校正，计算比对到基因上的reads/基因长度得到长度校正的表达量 reads per kilobase (RPK)。再以文库中RPK之和作为Scale Factor求出TPM。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TPM &lt;- function(x, gene.<span class=\"built_in\">length</span>)&#123;</span><br><span class=\"line\">  rpk &lt;- <span class=\"number\">1e3</span> * x/gene.<span class=\"built_in\">length</span></span><br><span class=\"line\">  <span class=\"built_in\">scale</span>.<span class=\"built_in\">factor</span> &lt;- <span class=\"built_in\">sum</span>(rpk)</span><br><span class=\"line\">  tpm &lt;- <span class=\"number\">1e6</span> * rpk/<span class=\"built_in\">scale</span>.<span class=\"built_in\">factor</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span>(tpm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于RPKM使用文库大小（read counts之和）来作为文库校正因子，TPM使用RPK之和作为文库校正因子的好处是考虑了不同样本间的基因长度的分布。因为RPK是一个对基因长度进行校正后的表达量单位，所以RPK之和也不会再带入基因长度的bias。因此，如果需要比较的样本之间转录本分布不一致时（例如不同物种RNA-seq的比较），使用TPM是一个较佳的normalization方案。</p>\n<p>RPKM和TPM这类方法就是为了使不同样本间的总体表达量趋于一致，让不同样本间的基因表达量有可比较性，而TPM能够更好地校正样本间的差异。</p>\n<p>常用的Normalization 方法总结</p>\n<table>\n<thead>\n<tr>\n<th>Normalization method</th>\n<th>描述</th>\n<th>考虑因素</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPM (counts per million)</td>\n<td>使用read counts的总和校正counts</td>\n<td>测序深度</td>\n<td>同一样本组重复样本之间的基因counts比较；不适用于样品内的比较或差异分析</td>\n</tr>\n<tr>\n<td>TPM (transcripts per kilobase million)</td>\n<td>每百万mapped reads中每kb转录本上的reads数</td>\n<td>测序深度和基因长度</td>\n<td>样本内或同一样本组样本之间的基因counts比较； 不适用于差异分析</td>\n</tr>\n<tr>\n<td>RPKM/FPKM (reads/fragments per kilobase of exon per million reads/fragments mapped)</td>\n<td>如TPM</td>\n<td>测序深度和基因长度</td>\n<td>样本内基因间的counts比较; 不适用于样本间比较和差异分析</td>\n</tr>\n<tr>\n<td>DESeq2’s median of ratios [1]</td>\n<td>counts除以样本特异的校正因子，该因子由基因计数相对于每个基因的几何平均值的中位数比率确定</td>\n<td>测序深度及RNA组成</td>\n<td>样本之间的基因counts比较以及差异分析; 不适用于样本内比较</td>\n</tr>\n<tr>\n<td>EdgeR’s trimmed mean of M values (TMM) [2]</td>\n<td>使用样本之间的加权截尾的对数表达量比值的均值进行TMM校正</td>\n<td>测序深度，RNA组成以及基因长度</td>\n<td>样品之间和样品内部的基因counts比较，适用于差异分析</td>\n</tr>\n</tbody>\n</table>\n<p>在进行差异表达分析时，我们实际上并不会用到RPKM/FPKM, TPM，而是使用raw counts给到差异分析的工具。这是由于RPKM/FPKM和TPM都没有考虑到样本间文库组成的差异，因而不适合用于样本间差异分析。</p>\n<h2 id=\"获取基因长度\">获取基因长度</h2>\n<p>计算TPM或RPKM/FPKM等基因表达量时，除了基因的counts信息外，我们还需要知道基因的长度。由于可变剪接的存在，一个基因可能会有多个转录本，在进行基因水平的表达分析时，我们并不会区分各个转录本剪接变体的表达量，而是以基因为单位进行统计。目前，对于基因长度有多种定义，包括：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>基因最长转录本；</p>\n</li>\n<li class=\"lvl-2\">\n<p>多个转录本长度的平均值；</p>\n</li>\n<li class=\"lvl-2\">\n<p>非重叠外显子长度之和：</p>\n</li>\n<li class=\"lvl-2\">\n<p>非重叠CDS序列长度之和。</p>\n</li>\n</ul>\n<p><img data-src=\"https://thereallda.github.io/2022/02/07/R-Retrieve-Gene-Length/paste-CBFC7C07.png\" alt=\"3\"></p>\n<p>Figure Source: Gene structure</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用gtf文件在R中获取基因长度（非重叠外显子长度之和）</span><br><span class=\"line\">#首先，读取计算基因counts时用的GTF文件，并将其转换为TxDb对象；</span><br><span class=\"line\">library(GenomicFeatures)</span><br><span class=\"line\">#一般常用的物种基因注释信息都已经有人构建好TxDb对象，以R包的形式上传到Bioconductor里。我们使用时直接加载、赋值即可。BiocManager::install(&quot;TxDb.Dmelanogaster.UCSC.dm6.ensGene&quot;)</span><br><span class=\"line\">#从本地读取数据库文件 txdb &lt;- makeTxDbFromGFF(&#x27;gencode.vM23.annotation.gtf&#x27;, format=&#x27;gtf&#x27;)</span><br><span class=\"line\">#然后，提取每个基因的外显子注释信息；exons.list.per.gene &lt;- exonsBy(txdb, by=&quot;gene&quot;)</span><br><span class=\"line\">library(TxDb.Dmelanogaster.UCSC.dm6.ensGene)</span><br><span class=\"line\">exons.list.per.gene &lt;- exonsBy(TxDb.Dmelanogaster.UCSC.dm6.ensGene, by=&quot;gene&quot;)</span><br><span class=\"line\">#最后，合并重叠的外显子，计算非重叠外显子的长度作为基因长度（bp）</span><br><span class=\"line\">exonic.gene.sizes &lt;- sum(width(reduce(exons.list.per.gene)))</span><br></pre></td></tr></table></figure>\n<p><code>GenomicFeatures</code>还支持自己手动从指定数据库中构建TxDb对象，例如从 UCSC提取构建的<code>makeTxDbFromUCSC()</code>函数；从BioMart提取构建的<code>makeTxDbFromBiomart()</code>函数等方法可以用作替补方案（没有对应TXDB的R包时）。</p>\n<p><code>tureCounts</code>统计基因counts时，其输出的counts.txt文件中通常会包含一列长度信息Length。也是采用非重叠外显子作为基因长度。</p>\n<h2 id=\"参考：\">参考：</h2>\n<ol>\n<li class=\"lvl-3\">\n<p>理论-简述RPKM-FPKM-AND-TPM | Dean’s blog (<span class=\"exturl\" data-url=\"aHR0cDovL3RoZXJlYWxsZGEuZ2l0aHViLmlv\">thereallda.github.io<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n<li class=\"lvl-3\">\n<p>R-获取基因长度 | Dean’s blog (<span class=\"exturl\" data-url=\"aHR0cDovL3RoZXJlYWxsZGEuZ2l0aHViLmlv\">thereallda.github.io<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n<li class=\"lvl-3\">\n<p>[R]bioconductor之GenomicFeatures学习 - 简书 (<span class=\"exturl\" data-url=\"aHR0cDovL2ppYW5zaHUuY29t\">jianshu.com<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n</ol>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"33502-1730425843713-524\",\n\t\t\t        \"name\": \"虫子的生存笔记\",\n\t\t\t        \"qrcode\": \"https://leaf-miner.pages.dev/image/%E5%85%AC%E4%BC%97%E5%8F%B7.png\",\n\t\t\t        \"keyword\": \"more\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","more":"<p><strong>RPKM:</strong> Reads per kilo base per million mapped reads (single-end sequencing)</p>\n<p><strong>FPKM:</strong> Fragments per kilo base per million mapped reads (paired-end sequencing)</p>\n<p>RPKM与FPKM实际上一样的单位，只不过RPKM是在单端测序文库中使用，而FPKM是双端测序所用的。对基因长度（gene length）以及测序深度（mapped reads from library）都进行了校正。<br>\n<img data-src=\"https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111816290.png\" alt=\"公式1\"></p>\n<h3 id=\"RPKM，FPKM\">RPKM，FPKM</h3>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#x为一个向量存储了每个基因的counts，而gene.length是相应于x中每个基因的长度的一个向量.</span></span><br><span class=\"line\">RPKM <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> gene.length<span class=\"punctuation\">)</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  lib.size <span class=\"operator\">&lt;-</span> <span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">  rpm <span class=\"operator\">&lt;-</span> 1e6 <span class=\"operator\">*</span> x<span class=\"operator\">/</span>lib.size</span><br><span class=\"line\">  rpkm <span class=\"operator\">&lt;-</span> 1e3 <span class=\"operator\">*</span> rpm<span class=\"operator\">/</span>gene.length</span><br><span class=\"line\">  <span class=\"built_in\">return</span><span class=\"punctuation\">(</span>rpkm<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">FPKM <span class=\"operator\">&lt;-</span> <span class=\"keyword\">function</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">,</span> gene.length<span class=\"punctuation\">)</span><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">  lib.size <span class=\"operator\">&lt;-</span> <span class=\"built_in\">sum</span><span class=\"punctuation\">(</span>x<span class=\"punctuation\">)</span></span><br><span class=\"line\">  rpm <span class=\"operator\">&lt;-</span> 1e6 <span class=\"operator\">*</span> x<span class=\"operator\">/</span>lib.size</span><br><span class=\"line\">  rpkm <span class=\"operator\">&lt;-</span> 1e3 <span class=\"operator\">*</span> rpm<span class=\"operator\">/</span>gene.length</span><br><span class=\"line\">  <span class=\"built_in\">return</span><span class=\"punctuation\">(</span>fpkm<span class=\"punctuation\">)</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"TPM\">TPM</h3>\n<p>TPM: Transcript per million<br>\n<img data-src=\"https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111831499.png\" alt=\"公式2\"></p>\n<p>TPM对基因的长度进行了校正，计算比对到基因上的reads/基因长度得到长度校正的表达量 reads per kilobase (RPK)。再以文库中RPK之和作为Scale Factor求出TPM。</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TPM &lt;- function(x, gene.<span class=\"built_in\">length</span>)&#123;</span><br><span class=\"line\">  rpk &lt;- <span class=\"number\">1e3</span> * x/gene.<span class=\"built_in\">length</span></span><br><span class=\"line\">  <span class=\"built_in\">scale</span>.<span class=\"built_in\">factor</span> &lt;- <span class=\"built_in\">sum</span>(rpk)</span><br><span class=\"line\">  tpm &lt;- <span class=\"number\">1e6</span> * rpk/<span class=\"built_in\">scale</span>.<span class=\"built_in\">factor</span></span><br><span class=\"line\">  <span class=\"built_in\">return</span>(tpm)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相比于RPKM使用文库大小（read counts之和）来作为文库校正因子，TPM使用RPK之和作为文库校正因子的好处是考虑了不同样本间的基因长度的分布。因为RPK是一个对基因长度进行校正后的表达量单位，所以RPK之和也不会再带入基因长度的bias。因此，如果需要比较的样本之间转录本分布不一致时（例如不同物种RNA-seq的比较），使用TPM是一个较佳的normalization方案。</p>\n<p>RPKM和TPM这类方法就是为了使不同样本间的总体表达量趋于一致，让不同样本间的基因表达量有可比较性，而TPM能够更好地校正样本间的差异。</p>\n<p>常用的Normalization 方法总结</p>\n<table>\n<thead>\n<tr>\n<th>Normalization method</th>\n<th>描述</th>\n<th>考虑因素</th>\n<th>使用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPM (counts per million)</td>\n<td>使用read counts的总和校正counts</td>\n<td>测序深度</td>\n<td>同一样本组重复样本之间的基因counts比较；不适用于样品内的比较或差异分析</td>\n</tr>\n<tr>\n<td>TPM (transcripts per kilobase million)</td>\n<td>每百万mapped reads中每kb转录本上的reads数</td>\n<td>测序深度和基因长度</td>\n<td>样本内或同一样本组样本之间的基因counts比较； 不适用于差异分析</td>\n</tr>\n<tr>\n<td>RPKM/FPKM (reads/fragments per kilobase of exon per million reads/fragments mapped)</td>\n<td>如TPM</td>\n<td>测序深度和基因长度</td>\n<td>样本内基因间的counts比较; 不适用于样本间比较和差异分析</td>\n</tr>\n<tr>\n<td>DESeq2’s median of ratios [1]</td>\n<td>counts除以样本特异的校正因子，该因子由基因计数相对于每个基因的几何平均值的中位数比率确定</td>\n<td>测序深度及RNA组成</td>\n<td>样本之间的基因counts比较以及差异分析; 不适用于样本内比较</td>\n</tr>\n<tr>\n<td>EdgeR’s trimmed mean of M values (TMM) [2]</td>\n<td>使用样本之间的加权截尾的对数表达量比值的均值进行TMM校正</td>\n<td>测序深度，RNA组成以及基因长度</td>\n<td>样品之间和样品内部的基因counts比较，适用于差异分析</td>\n</tr>\n</tbody>\n</table>\n<p>在进行差异表达分析时，我们实际上并不会用到RPKM/FPKM, TPM，而是使用raw counts给到差异分析的工具。这是由于RPKM/FPKM和TPM都没有考虑到样本间文库组成的差异，因而不适合用于样本间差异分析。</p>\n<h2 id=\"获取基因长度\">获取基因长度</h2>\n<p>计算TPM或RPKM/FPKM等基因表达量时，除了基因的counts信息外，我们还需要知道基因的长度。由于可变剪接的存在，一个基因可能会有多个转录本，在进行基因水平的表达分析时，我们并不会区分各个转录本剪接变体的表达量，而是以基因为单位进行统计。目前，对于基因长度有多种定义，包括：</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>基因最长转录本；</p>\n</li>\n<li class=\"lvl-2\">\n<p>多个转录本长度的平均值；</p>\n</li>\n<li class=\"lvl-2\">\n<p>非重叠外显子长度之和：</p>\n</li>\n<li class=\"lvl-2\">\n<p>非重叠CDS序列长度之和。</p>\n</li>\n</ul>\n<p><img data-src=\"https://thereallda.github.io/2022/02/07/R-Retrieve-Gene-Length/paste-CBFC7C07.png\" alt=\"3\"></p>\n<p>Figure Source: Gene structure</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#使用gtf文件在R中获取基因长度（非重叠外显子长度之和）</span><br><span class=\"line\">#首先，读取计算基因counts时用的GTF文件，并将其转换为TxDb对象；</span><br><span class=\"line\">library(GenomicFeatures)</span><br><span class=\"line\">#一般常用的物种基因注释信息都已经有人构建好TxDb对象，以R包的形式上传到Bioconductor里。我们使用时直接加载、赋值即可。BiocManager::install(&quot;TxDb.Dmelanogaster.UCSC.dm6.ensGene&quot;)</span><br><span class=\"line\">#从本地读取数据库文件 txdb &lt;- makeTxDbFromGFF(&#x27;gencode.vM23.annotation.gtf&#x27;, format=&#x27;gtf&#x27;)</span><br><span class=\"line\">#然后，提取每个基因的外显子注释信息；exons.list.per.gene &lt;- exonsBy(txdb, by=&quot;gene&quot;)</span><br><span class=\"line\">library(TxDb.Dmelanogaster.UCSC.dm6.ensGene)</span><br><span class=\"line\">exons.list.per.gene &lt;- exonsBy(TxDb.Dmelanogaster.UCSC.dm6.ensGene, by=&quot;gene&quot;)</span><br><span class=\"line\">#最后，合并重叠的外显子，计算非重叠外显子的长度作为基因长度（bp）</span><br><span class=\"line\">exonic.gene.sizes &lt;- sum(width(reduce(exons.list.per.gene)))</span><br></pre></td></tr></table></figure>\n<p><code>GenomicFeatures</code>还支持自己手动从指定数据库中构建TxDb对象，例如从 UCSC提取构建的<code>makeTxDbFromUCSC()</code>函数；从BioMart提取构建的<code>makeTxDbFromBiomart()</code>函数等方法可以用作替补方案（没有对应TXDB的R包时）。</p>\n<p><code>tureCounts</code>统计基因counts时，其输出的counts.txt文件中通常会包含一列长度信息Length。也是采用非重叠外显子作为基因长度。</p>\n<h2 id=\"参考：\">参考：</h2>\n<ol>\n<li class=\"lvl-3\">\n<p>理论-简述RPKM-FPKM-AND-TPM | Dean’s blog (<span class=\"exturl\" data-url=\"aHR0cDovL3RoZXJlYWxsZGEuZ2l0aHViLmlv\">thereallda.github.io<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n<li class=\"lvl-3\">\n<p>R-获取基因长度 | Dean’s blog (<span class=\"exturl\" data-url=\"aHR0cDovL3RoZXJlYWxsZGEuZ2l0aHViLmlv\">thereallda.github.io<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n<li class=\"lvl-3\">\n<p>[R]bioconductor之GenomicFeatures学习 - 简书 (<span class=\"exturl\" data-url=\"aHR0cDovL2ppYW5zaHUuY29t\">jianshu.com<i class=\"fa fa-external-link-alt\"></i></span>)</p>\n</li>\n</ol>","categories":[{"name":"笔记","path":"api/categories/笔记.json"},{"name":"科研","path":"api/categories/科研.json"}],"tags":[{"name":"笔记","path":"api/tags/笔记.json"},{"name":"R语言","path":"api/tags/R语言.json"},{"name":"RNA-seq","path":"api/tags/RNA-seq.json"},{"name":"生信","path":"api/tags/生信.json"},{"name":"测序","path":"api/tags/测序.json"},{"name":"标准化","path":"api/tags/标准化.json"}]}