{"title":"R语言--SimpleITK","slug":"R语言-SIMPLEITK","date":"2024-05-16T09:02:40.000Z","updated":"2024-10-18T19:40:58.802Z","comments":true,"path":"api/articles/R语言-SIMPLEITK.json","excerpt":"SimpleITK 是 Insight 工具包（ITK）算法和数据结构的简化编程接口。它支持多种编程语言的接口，包括 C++、Python、R、Java、C#、Lua、Ruby 和 TCL。这些绑定使科学家能够用他们最熟悉的编程语言开发图像分析工作流。该工具包支持 15 种以上不同的图像文件格式，提供 280 多种图像分析过滤器，并为 ITK 基于强度的配准框架实现了统一接口。","covers":null,"content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><div id=\"vip-container\"><p><strong>SimpleITK</strong> 是 Insight 工具包（ITK）算法和数据结构的简化编程接口。它支持多种编程语言的接口，包括 C++、Python、R、Java、C#、Lua、Ruby 和 TCL。这些绑定使科学家能够用他们最熟悉的编程语言开发图像分析工作流。该工具包支持 15 种以上不同的图像文件格式，提供 280 多种图像分析过滤器，并为 ITK 基于强度的配准框架实现了统一接口。</p>\n<span id=\"more\"></span>\n<h2 id=\"特点\">特点</h2>\n<p>使用 Python、R、Java、C#、Lua、Ruby、TCL 和 C++ 进行开源多维图像分析。由 Insight 工具包社区为生物医学科学及其他领域开发。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">被视为空间对象而非像素阵列的图像。计算在二维或三维物理空间中进行。</li>\n<li class=\"lvl-2\">利用刚性或可变形变换快速配准二维和三维模内和模间图像的配准框架。</li>\n<li class=\"lvl-2\">从经典的Otsu thresholding到水平集(level sets) 和分水岭(watersheds)，为图像分割工作流程提供了丰富的过滤器。</li>\n<li class=\"lvl-2\">评估分割结果（豪斯多夫距离、雅卡德值和骰子值、表面距离等&lt;Hausdorff distance, Jaccard and Dice values, surface distances etc.&gt; ）和分析分割形状特征（定向边界框、主矩、周长、伸长率、费雷特直径等&lt;oriented bounding box, principal moments, perimeter, elongation, Feret diameter etc.&gt;）的工具。</li>\n<li class=\"lvl-2\">图像文件输入/输出，支持 20 多种图像文件格式（jpg、png、DICOM、TIFF 等），并可在不同格式间轻松转换。</li>\n<li class=\"lvl-2\">通过基于进程和线程的并行化，可随时集成到集群或台式机的并行处理框架中。</li>\n</ul>\n<h2 id=\"安装R包-SimpleITKRInstaller\">安装R包-SimpleITKRInstaller</h2>\n<p><code>devtools::install_github(&quot;SimpleITK/SimpleITKRInstaller&quot;)</code></p>\n<h2 id=\"Fiji\">Fiji</h2>\n<p>SimpleITK 有一个内置函数 <code>itk::simple::Show()</code>，可用于在交互会话中查看图像。默认情况下，该 Show 函数会搜索已安装的 Fiji 来显示图像。如果找不到 Fiji，则会搜索 ImageJ。选择 Fiji/ImageJ 是因为它们可以处理 SimpleITK 支持的所有图像类型，包括每像素有 n 个分量的 3D 矢量图像。    Show 函数会在多个标准位置搜索 Fiji/ImageJ。具体位置取决于系统类型（Linux、Mac 或 Windows）。启用 &quot;Show &quot;的 &quot;debugOn &quot;选项后，用户可以看到 SimpleITK 正在搜索 Fiji（或其他查看应用程序）的位置，以及用于启动查看应用程序的实际命令。    Show 是 ImageViewer 类的功能接口。可以使用 ImageViewer 对象配置其他查看应用程序.</p>\n<hr>\n<h2 id=\"图片导入和导出\">图片导入和导出</h2>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>SimpleITK<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">reader <span class=\"operator\">&lt;-</span> ImageFileReader<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">reader<span class=\"operator\">$</span>SetImageIO<span class=\"punctuation\">(</span><span class=\"string\">&quot;PNGImageIO&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">reader<span class=\"operator\">$</span>SetFileName<span class=\"punctuation\">(</span>inputImageFileName<span class=\"punctuation\">)</span></span><br><span class=\"line\">image <span class=\"operator\">&lt;-</span> reader<span class=\"operator\">$</span>Execute<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer <span class=\"operator\">&lt;-</span> ImageFileWriter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">writer<span class=\"operator\">$</span>SetFileName<span class=\"punctuation\">(</span>outputImageFileName<span class=\"punctuation\">)</span></span><br><span class=\"line\">writer<span class=\"operator\">$</span>Execute<span class=\"punctuation\">(</span>image<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>上面的示例指定使用 PNGImageIO 来读取文件。如果省略该行，SimpleITK 将根据文件名的后缀和/或文件头自动确定要使用哪个 IO。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image <span class=\"operator\">&lt;-</span> ReadImage<span class=\"punctuation\">(</span>inputImageFileName<span class=\"punctuation\">)</span></span><br><span class=\"line\">WriteImage<span class=\"punctuation\">(</span>image<span class=\"punctuation\">,</span> outputImageFileName<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n</div>\n\n\t\t\t<script src=\"https://my.openwrite.cn/js/readmore.js\" type=\"text/javascript\"></script>\n\t\t\t<script>\n\t\t\tvar isMobile = navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i);\n\t\t\tif (!isMobile) {\n\t\t\t    var btw = new BTWPlugin();\n\t\t\t    btw.init({\n\t\t\t        \"id\": \"vip-container\",\n\t\t\t        \"blogId\": \"33502-1730425843713-524\",\n\t\t\t        \"name\": \"虫子的生存笔记\",\n\t\t\t        \"qrcode\": \"https://leaf-miner.pages.dev/image/%E5%85%AC%E4%BC%97%E5%8F%B7.png\",\n\t\t\t        \"keyword\": \"more\"\n\t\t\t    });\n\t\t\t}\n\t\t\t</script>\n\t\t","more":"<h2 id=\"特点\">特点</h2>\n<p>使用 Python、R、Java、C#、Lua、Ruby、TCL 和 C++ 进行开源多维图像分析。由 Insight 工具包社区为生物医学科学及其他领域开发。</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">被视为空间对象而非像素阵列的图像。计算在二维或三维物理空间中进行。</li>\n<li class=\"lvl-2\">利用刚性或可变形变换快速配准二维和三维模内和模间图像的配准框架。</li>\n<li class=\"lvl-2\">从经典的Otsu thresholding到水平集(level sets) 和分水岭(watersheds)，为图像分割工作流程提供了丰富的过滤器。</li>\n<li class=\"lvl-2\">评估分割结果（豪斯多夫距离、雅卡德值和骰子值、表面距离等&lt;Hausdorff distance, Jaccard and Dice values, surface distances etc.&gt; ）和分析分割形状特征（定向边界框、主矩、周长、伸长率、费雷特直径等&lt;oriented bounding box, principal moments, perimeter, elongation, Feret diameter etc.&gt;）的工具。</li>\n<li class=\"lvl-2\">图像文件输入/输出，支持 20 多种图像文件格式（jpg、png、DICOM、TIFF 等），并可在不同格式间轻松转换。</li>\n<li class=\"lvl-2\">通过基于进程和线程的并行化，可随时集成到集群或台式机的并行处理框架中。</li>\n</ul>\n<h2 id=\"安装R包-SimpleITKRInstaller\">安装R包-SimpleITKRInstaller</h2>\n<p><code>devtools::install_github(&quot;SimpleITK/SimpleITKRInstaller&quot;)</code></p>\n<h2 id=\"Fiji\">Fiji</h2>\n<p>SimpleITK 有一个内置函数 <code>itk::simple::Show()</code>，可用于在交互会话中查看图像。默认情况下，该 Show 函数会搜索已安装的 Fiji 来显示图像。如果找不到 Fiji，则会搜索 ImageJ。选择 Fiji/ImageJ 是因为它们可以处理 SimpleITK 支持的所有图像类型，包括每像素有 n 个分量的 3D 矢量图像。    Show 函数会在多个标准位置搜索 Fiji/ImageJ。具体位置取决于系统类型（Linux、Mac 或 Windows）。启用 &quot;Show &quot;的 &quot;debugOn &quot;选项后，用户可以看到 SimpleITK 正在搜索 Fiji（或其他查看应用程序）的位置，以及用于启动查看应用程序的实际命令。    Show 是 ImageViewer 类的功能接口。可以使用 ImageViewer 对象配置其他查看应用程序.</p>\n<hr>\n<h2 id=\"图片导入和导出\">图片导入和导出</h2>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">library<span class=\"punctuation\">(</span>SimpleITK<span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">reader <span class=\"operator\">&lt;-</span> ImageFileReader<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">reader<span class=\"operator\">$</span>SetImageIO<span class=\"punctuation\">(</span><span class=\"string\">&quot;PNGImageIO&quot;</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">reader<span class=\"operator\">$</span>SetFileName<span class=\"punctuation\">(</span>inputImageFileName<span class=\"punctuation\">)</span></span><br><span class=\"line\">image <span class=\"operator\">&lt;-</span> reader<span class=\"operator\">$</span>Execute<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\"></span><br><span class=\"line\">writer <span class=\"operator\">&lt;-</span> ImageFileWriter<span class=\"punctuation\">(</span><span class=\"punctuation\">)</span></span><br><span class=\"line\">writer<span class=\"operator\">$</span>SetFileName<span class=\"punctuation\">(</span>outputImageFileName<span class=\"punctuation\">)</span></span><br><span class=\"line\">writer<span class=\"operator\">$</span>Execute<span class=\"punctuation\">(</span>image<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>\n<p>上面的示例指定使用 PNGImageIO 来读取文件。如果省略该行，SimpleITK 将根据文件名的后缀和/或文件头自动确定要使用哪个 IO。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">image <span class=\"operator\">&lt;-</span> ReadImage<span class=\"punctuation\">(</span>inputImageFileName<span class=\"punctuation\">)</span></span><br><span class=\"line\">WriteImage<span class=\"punctuation\">(</span>image<span class=\"punctuation\">,</span> outputImageFileName<span class=\"punctuation\">)</span></span><br></pre></td></tr></table></figure>","categories":[{"name":"笔记","path":"api/categories/笔记.json"},{"name":"学习","path":"api/categories/学习.json"}],"tags":[{"name":"插件","path":"api/tags/插件.json"},{"name":"笔记","path":"api/tags/笔记.json"},{"name":"ImageJ","path":"api/tags/ImageJ.json"},{"name":"简介","path":"api/tags/简介.json"},{"name":"图像","path":"api/tags/图像.json"}]}