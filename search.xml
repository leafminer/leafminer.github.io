<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo新建文章及发布指令--笔记</title>
    <url>/2024/05/08/Hexo%E6%96%B0%E5%BB%BA%E6%96%87%E7%AB%A0%E5%8F%8A%E5%8F%91%E5%B8%83%E6%8C%87%E4%BB%A4--%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<h1>完成后部署</h1>
<p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;$ hexo generate --deploy</span><br><span class="line">&gt;$ hexo deploy --generate</span><br><span class="line"></span><br><span class="line">**简写**</span><br><span class="line">&gt;$ hexo g -d</span><br><span class="line">&gt;$ hexo d -g</span><br></pre></td></tr></table></figure>
</blockquote>
<span id="more"></span> 
<h2 id="新建">新建</h2>
<p><code>hexo new [layout] &lt;title&gt;</code><br>
布局（Layout）有三种：post、page 和 draft。</p>
<table>
<thead>
<tr>
<th>布局</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>post</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>source/_drafts</td>
</tr>
</tbody>
</table>
<h3 id="新建文章">新建文章</h3>
<p>windows下使用命令行创建新的博客文章如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。<br>
<code>hexo new &quot;post title with whitespace&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数	描述</span><br><span class="line">-p, --path	自定义新文章的路径</span><br><span class="line">-r, --replace	如果存在同名文章，将其替换</span><br><span class="line">-s, --slug	文章的 Slug，作为新文章的文件名和发布后的 URL</span><br></pre></td></tr></table></figure>
<p>Hexo 主页文章列表默认会显示文章全文，浏览时很不方便，可以在文章中插入 <!--more--> 进行分段。</p>
<h3 id="新建独立页面">新建独立页面</h3>
<p><code>hexo new page --path about/me &quot;About me&quot;</code><br>
以上命令会创建一个 source/about/me.md 文件，同时 Front Matter 中的 title 为 “About me”</p>
<h3 id="新建草稿">新建草稿</h3>
<p><code>hexo new draft &quot;draft&quot;</code></p>
<h2 id="生成静态网页">生成静态网页</h2>
<p><code>hexo generate</code><br>
可简写为<code>hexo g</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选项	描述</span><br><span class="line">-d, --deploy	文件生成后立即部署网站</span><br><span class="line">-w, --watch	监视文件变动</span><br><span class="line">-b, --bail	生成过程中如果发生任何未处理的异常则抛出异常</span><br><span class="line">-f, --force	强制重新生成文件Hexo 引入了差分机制，如果 public 目录存在，那么 hexo g 只会重新生成改动的文件。使用该参数的效果接近 hexo clean &amp;&amp; hexo generate</span><br><span class="line">-c, --concurrency	最大同时生成文件的数量，默认无限制</span><br></pre></td></tr></table></figure>
<h2 id="发布">发布</h2>
<p>发表草稿。<br>
<code>hexo publish [layout] &lt;filename&gt;</code></p>
<h2 id="server">server</h2>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/%E3%80%82">http://localhost:4000/。</a><br>
<code>hexo server</code></p>
<h2 id="布署-deploy">布署(deploy)</h2>
<p><code>hexo deploy</code><br>
可简写为<code>hexo d</code></p>
<h2 id="渲染文件">渲染文件</h2>
<p><code>hexo render &lt;file1&gt; [file2] ...</code></p>
<h2 id="迁移">迁移</h2>
<p><code>hexo migrate &lt;type&gt;</code></p>
<h2 id="清除缓存和已生成的静态文件">清除缓存和已生成的静态文件</h2>
<p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。<br>
<code>hexo clean</code></p>
<h2 id="list">list</h2>
<p>列出网站数据。<br>
<code>hexo list &lt;type&gt;</code></p>
<h2 id="显示草稿">显示草稿</h2>
<p><code>hexo --draft</code><br>
显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>指令</tag>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>ImageJ--Feature Finder插件</title>
    <url>/2024/05/09/ImageJ--%E5%9B%BE%E5%83%8F%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D-Feature%20Finder%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/images/feature-finder-screenshot.jpg=100x100" alt=""><br>
<strong>Feature Finder</strong> 是ImageJ 中的图像模板匹配（Template Matching）插件，用于查找与原型（模板）相同或相似的特征。&quot;相似 &quot;是指图像与原型之间的均方偏差应该很小。</p>
<span id="more"></span> 
<p><img src="/images/20240509_223918_00000.png" alt=""></p>
<h2 id="用途">用途</h2>
<blockquote>
<ul class="lvl-1">
<li class="lvl-2">
<p>目标检测：通过将已知目标作为模板，在图像中寻找与模板最相似的区域，从而实现目标的检测。</p>
</li>
<li class="lvl-2">
<p>物体跟踪：通过不断更新模板，可以实现对移动目标在视频序列中的跟踪。</p>
</li>
<li class="lvl-2">
<p>字符识别：通过利用字符的模板，可以识别文本中的字符或数字。</p>
</li>
</ul>
</blockquote>
<h2 id="特点">特点</h2>
<p><strong>优点：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>经过（缓慢的）初始计算后，预览提供了一种快速确定相似度阈值的方法。</p>
</li>
<li class="lvl-2">
<p>亚像素精度。</p>
</li>
<li class="lvl-2">
<p>在预览过程中，可以通过对找到的特征进行平均来完善原型。</p>
</li>
</ul>
<p><strong>局限：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>仅适用于灰度图像；像素值的任何校准都会被忽略。</p>
</li>
<li class="lvl-2">
<p>只能搜索未旋转（或圆形）和未缩放的特征。</p>
</li>
<li class="lvl-2">
<p>速度较慢，小原型除外（暴力算法，无 FFT）。</p>
</li>
<li class="lvl-2">
<p>预览期间，当进度条处于激活状态时：不要更改对话框中的任何输入，否则会重新启动，耗时更长。</p>
</li>
<li class="lvl-2">
<p>不处理堆栈。</p>
</li>
</ul>
<h2 id="安装">安装</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>下载<a href="https://github.com/imagej/imagej.github.io/blob/main/media/plugins/feature-finder/Feature_Finder.java">Feature_Finder.java</a></p>
</li>
<li class="lvl-2">
<p>将原始的 <code>Feature_Finder.java</code> 文件复制到 ImageJ 插件文件夹 (plugins) 或其子文件夹中。确保将下载的文件命名为 “Feature_Finder.java”；大写/小写都很重要。</p>
</li>
<li class="lvl-2">
<p>使用 &quot;编译并运行 (Compile and Run)&quot;进行编译，然后按 “确定”。请注意，&quot;编译并运行 &quot;功能目前在 Fiji 上无法使用；作为一种变通方法，请使用文件&gt;新建&gt;脚本，打开 Feature_Finder.java 文件并按 “运行”。</p>
</li>
<li class="lvl-2">
<p>使用 “帮助”&gt;&quot;更新菜单 &quot;或重新启动 ImageJ 使其出现在插件菜单中（如果您已使用 Fiji 脚本编辑器，则无需使用）。</p>
</li>
</ul>
<h2 id="参数选项-Dialog-Options">参数选项 (Dialog Options)</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>Prototype from</strong> 选择原型 (prototype)。这可以是当前图像或不同图像的 ROI。</p>
</li>
<li class="lvl-2">
<p><strong>Output Type</strong> 可以是：</p>
<ul class="lvl-2">
<li class="lvl-6">点选择：所有特征中心的点 ROI。</li>
<li class="lvl-6">计数：找到的特征数量写入结果表。</li>
<li class="lvl-6">列表：中心的 x 和 y 像素坐标列表被写入结果表。</li>
<li class="lvl-6">列表（校准）：与“列表”类似，但将校准的 x 和 y 坐标写入结果表。</li>
<li class="lvl-6">点图：一个单独的二值图像，每个特征的中心有一个像素 = 255。</li>
<li class="lvl-6">偏差图：单独的浮点（32 位）图像。每个点的值表示原始图像中该位置的周围环境与原型的偏离程度。偏差图独立于“公差”设置。</li>
<li class="lvl-6">特征平均值：单独的浮点（32 位）输出图像，所有特征的平均值移动到同一位置。</li>
</ul>
</li>
<li class="lvl-2">
<p><strong>Subtract Background</strong>使用减去背景，特征被认为是相同的，独立于任何恒定（相加）背景。</p>
</li>
<li class="lvl-2">
<p><strong>Soft Edges</strong> 软边缘为原型的近边缘像素赋予的权重小于靠近中心的像素的权重。</p>
</li>
<li class="lvl-2">
<p><strong>Distance Min</strong>如果要素靠得很近，小于“最小距离”，则仅保留最匹配的要素。</p>
</li>
<li class="lvl-2">
<p><strong>Tolerance</strong>公差决定了特征与原型的偏差程度。值 0 表示完全匹配，100 表示偏差等于原型的方差。启用“减去背景”后，在公差为 100% 的情况下，原型区域上具有恒定值的图像区域也符合特征。</p>
</li>
<li class="lvl-2">
<p><strong>Refine</strong> 在预览过程中，设置容差后，您可以按“调整”按钮。这会根据当前选择的所有特征的平均值计算出新的原型。例如，如果原型受到噪声影响，“优化”很有用。在预览期间，该对话框还显示特征数量与原型偏差的直方图以及包含找到的特征数量的消息。</p>
</li>
</ul>
<h2 id="提示和技巧">提示和技巧</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>在预览过程中，直方图右侧经常会出现一个宽阔的峰值。这就是假匹配。请将阈值保持在该峰值以下。</p>
</li>
<li class="lvl-2">
<p>特征应与原型具有相同的灰度对比度。如果不是这种情况，建议选择图像中可能出现的对比度最高的模板。</p>
</li>
<li class="lvl-2">
<p>如果阈值法失败，也可以尝试创建偏差图并对其进行处理（背景减除、高通滤波器、查找最大值…）。</p>
</li>
</ul>
<h2 id="参考">参考</h2>
<ol>
<li class="lvl-3">
<p><a href="https://imagej.github.io/plugins/feature-finder">https://imagej.github.io/plugins/feature-finder</a></p>
</li>
<li class="lvl-3">
<p><a href="https://blog.csdn.net/twnkie/article/details/132154253">https://blog.csdn.net/twnkie/article/details/132154253</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ImageJ</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ImageJ</tag>
        <tag>图像</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>ImageJ--形态学数据挖掘、三维建模以及图像拼接、配准、编辑和注释-TrakEM2简介</title>
    <url>/2024/05/16/ImageJ--%E5%BD%A2%E6%80%81%E5%AD%A6%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E3%80%81%E4%B8%89%E7%BB%B4%E5%BB%BA%E6%A8%A1%E4%BB%A5%E5%8F%8A%E5%9B%BE%E5%83%8F%E6%8B%BC%E6%8E%A5%E3%80%81%E9%85%8D%E5%87%86%E3%80%81%E7%BC%96%E8%BE%91%E5%92%8C%E6%B3%A8%E9%87%8A-TrakEM2%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>TrakEM2 是一个 ImageJ 插件，用于形态学数据挖掘、三维建模以及图像拼接、配准、编辑和注释。</p>
<span id="more"></span> 
<h2 id="设备要求">设备要求</h2>
<p>要运行 TrakEM2，该为 Fiji 的 JVM 分配多少内存？<br>
取数据集中最大的单个二维图像，然后将其大小乘以 10，并确保 CPU 的每个内核至少有这么多可用内存。<br>
例如，对于 4096x4096 16 位图像，每个内核至少需要 335 Mb，因此 16 个内核至少需要 5.4 Gb 内存。8 Gb 可能会更好。32GB 的内存使用起来会很方便。<br>
至于显卡，在计算能力和内置内存方面都要买你能负担得起的最大显卡。</p>
<h2 id="特征">特征</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>特征分割：</strong> 在堆栈(stack)上手动绘制区域，用球和管道勾勒结构。骨架化整个神经元轴突，用关系连接器对象表示突触。</p>
</li>
<li class="lvl-2">
<p><strong>测量：</strong> 体积、表面、长度，以及通过 ImageJ ROI 进行测量。</p>
</li>
<li class="lvl-2">
<p><strong>图像配准：</strong> 使用 SIFT 和全局优化算法将浮动图块相互配准。</p>
</li>
<li class="lvl-2">
<p><strong>三维可视化：</strong> 通过与三维浏览器插件交互，TrakEM2 可显示图像体积和各种三维网格。</p>
</li>
<li class="lvl-2">
<p><strong>图像注释：</strong> 浮动文本标签。</p>
</li>
<li class="lvl-2">
<p><strong>语义分割：</strong> 以树状层次排列分割，其模板可导出供其他类似项目重复使用。</p>
</li>
</ul>
<h2 id=""></h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>通过 &quot;File - New - TrakEM2 (blank)&quot;创建新项目</p>
</li>
<li class="lvl-2">
<p>通过将 .xml 文件拖到工具栏上或通过 &quot;文件 - 打开 &quot;打开现有项目。</p>
</li>
</ul>
<h2 id="TrakEM2最佳性能设定">TrakEM2最佳性能设定</h2>
<h3 id="加快图层浏览">加快图层浏览</h3>
<p>右键单击画布，选择 “Display - Properties…”。然后确保</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>&quot;snapshots mode &quot;设置为 “Disabled”，或最多设置为 “Outlines”。</p>
</li>
<li class="lvl-2">
<p>取消&quot;Prepaint&quot;，使其处于禁用状态。</p>
</li>
</ul>
<h3 id="导入大量图像，并在导入后立即进行编辑">导入大量图像，并在导入后立即进行编辑</h3>
<p>避免多次生成 mip，不启用 “enable mipmaps”，使其处于禁用状态。由于不会生成贴图，将无法在导入时快速浏览图层。现在要纠正对比度，首先要重新启用 mipmaps，方法是：&quot;Display - Properties&quot;并选中 “enable mipmaps” 复选框。然后有两个（非排他性）选项：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>A. 使用右键菜单中的内置命令，例如</p>
<ul class="lvl-2">
<li class="lvl-6">“Adjust images - Enhance contrast layer-wise”</li>
<li class="lvl-6">“Adjust images - Set min and max layer-wise”。</li>
</ul>
</li>
<li class="lvl-2">
<p>B. 创建一个预处理器脚本并将其设置为所有图像。例如，在每个图像上运行 CLAHE 的 beanshell 脚本。在脚本中，patch 和 imp 变量自动存在，分别代表 Patch 实例和 Patch 封装的 ImagePlus 实例。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ij.IJ;</span><br><span class="line">IJ.run(imp, <span class="string">&quot;Enhance Local Contrast (CLAHE)&quot;</span>, <span class="string">&quot;blocksize=127&quot;</span></span><br><span class="line">   + <span class="string">&quot; histogram=256 maximum=3 mask=*None* fast_(less_accurate)&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>要将脚本设置为所有图像，请将上述内容保存到名为 “whatever.bsh “的文件中（注意文件名扩展名为”.bsh”），然后右键单击 TrakEM2 画布，选择 “Script - Set preprocessor script layer-wise”，并选择整个图层范围。这会将脚本设置到每个图层的每个图像上，并触发每个图像的 mipmap 再生。当 TrakEM2 加载图像时，脚本将在 TrakEM2 看到图像内容之前在图像上运行。</p>
<h3 id="快速重新生成-mipmap">快速重新生成 mipmap</h3>
<p>mipmap 的默认生成方式是平均生成，速度相当快。不过，还可以考虑将其并行化：进入 “Project - Properties…”，将 mipmap 线程数设置为您机器的内核数，例如 12。如果选择使用高斯模式生成 mipmaps，请进入 “Project - Properties…”，将 mipmaps 模式设置为 “Gaussian”。必须注意以下事项：<br>
在 TrakEM2 0.9a 及更高版本中，mipmaps 机器可以使用最新 ImageJ 中的多线程高斯实现。这意味着现在有两组线程：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>线程集，每个线程重新生成单张图像的 mipmap 金字塔。</p>
</li>
<li class="lvl-2">
<p>在生成 mipmap 金字塔的过程中，每迭代一次缩放，就会有一组线程执行高斯模糊降采样。</p>
</li>
</ul>
<p>如果您的机器有 12 个内核，默认设置将使用 1 个线程处理 mipmap，12 个线程处理高斯模糊。这可能不符合您的数据属性：如果图像较小，您可能需要等待很长时间才能生成 mipmap。有两种策略可以加速基于高斯的 mipmaps 生成：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>策略 A：您的数据由大图像组成（超过 4000x4000）。右键单击 TrakEM2 显示屏，选择 “Project - Properties…”，将 mipmap 线程设置为 1（默认值）。现在，将使用 12 个线程（给定 12 个内核）计算高斯，每次为单个图像重新生成 mipmap。</p>
</li>
<li class="lvl-2">
<p>策略 B：您的数据由小图像组成（小于 4000x4000）。进入 Fiji 窗口，选择 “Edit - Options - Memory &amp; Threads…”，将线程数设为 1。 然后进入 “Project - Properties…”，将 mipmap 线程数设为 12。现在，mipmap 将一次生成 12 幅图像（给定 12 个内核），每幅图像使用一个线程计算高斯。</p>
</li>
</ul>
<p>如果您的电脑内存较少，或者访问图像的速度较慢（例如数据保存在 USB 硬盘中），也可以使用策略 A。这就是为什么默认情况下只用一个线程生成 mipmaps。<br>
如果将生成 mipmaps 的方法改为非高斯方法，就不会出现上述情况。将生成 mipmaps 的线程数设置为内核数，如果电脑内存不多，则设置为更少的线程数。</p>
<h3 id="使用更大的quadtree-buckets，XML-加载更快，内存消耗更少">使用更大的quadtree buckets，XML 加载更快，内存消耗更少</h3>
<p>除了为大图像选择合适的 mipmap 生成策略外，还要确保适当设置bucket的大小。<br>
<strong>什么是 TrakEM2 中的 “bucket”：</strong> 每个层（每个部分）都有一个内部四叉树，用于查找鼠标下的对象（如图像），或快速查找与其他图像重叠的图像。换句话说，就是能够执行快速空间查询，例如查找与给定矩形相交的所有图像列表。<br>
如果图像bucket的尺寸很小（默认边长为 4096 像素，那么一个图像桶就是一个 4096x4096 像素的正方形，这可以说是相当小了），再加上画布尺寸很大，生成的图像桶就会太多。这将耗费大量时间和内存。如果您的每个部分只有大约 100 张图片，而且图片都比较大（例如，每张图片的尺寸为 8096x8096 像素），那么请将bucket大小设置为比默认值大得多的值，例如 100000。这样实际上就只有一个bucket了。<br>
当一个图层中有许多小对象或许多小的 zdisplayable 对象时，就需要使用小的数据bucket。在这种情况下，例如每个图层只有一个图像，但其中有许多较小的 Ball 或 Pipe 或 AreaList 对象，那么可以使用默认的数据bucket大小（4096）或更小。否则，可以选择大尺寸甚至超大尺寸，这样就能有效地移除bucket功能，并简化为列表搜索，而列表搜索对于 100 张左右的小图像列表来说是没有问题的。    在配准/对齐分布在 5000 个部分的 400,000 张图片时，将图片桶设置为大（如 40960，默认值的 10 倍，甚至更大）是合理的。    将数据bucket大小设置为较大值将大大减少 XML 的加载时间。    要设置数据bucket大小，请右键单击并选择 “Display - Properties …”，然后写入数据桶大小值。</p>
<h2 id="TrakEM2-一些脚本">TrakEM2 一些脚本</h2>
<p>打开 “Plugins - Scripting - Jython Interpreter”（请参阅 “<a href="https://imagej.net/scripting">脚本帮助</a>”），确保打开了 TrakEM2 项目，并打开显示图片。然后键入或粘贴下面的示例。或者使用 &quot;File - New - Script&quot;打开一个新的脚本编辑器窗口，然后粘贴示例，选择 “Language - Python”，并按下 &quot;Run &quot;按钮。基础：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>拖动图像并将其可视化的画布是显示对象的一部分。后者拥有访问其 &quot;选区 &quot;以及 &quot;显示 &quot;正在查看的 &quot;图层 &quot;和 &quot;图层集 &quot;的方法。</p>
</li>
<li class="lvl-2">
<p>图层包含 Patch（每个 Patch 都包裹着一幅图像）和 DLabel（浮动文本）等 2D 对象。</p>
</li>
<li class="lvl-2">
<p>LayerSet 包含三维对象，如 AreaList、Pipe、Polyline、Ball、Dissector、Treeline 和 Stack（后者封装了包含 ij.ImageStack 的 ij.ImagePlus）。</p>
</li>
</ul>
<h3 id="获取所选图像实例">获取所选图像实例</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Display.getFront().getActive()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> p</span><br><span class="line">    090504_0314_ex0768.mrc z=<span class="number">0.0</span> <span class="comment">#67398</span></span><br></pre></td></tr></table></figure>
<h3 id="获取选定图像的ImagePlus">获取选定图像的ImagePlus</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>p = Display.getFront().getActive()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>imp = p.getImagePlus()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> imp.width, imp.height</span><br><span class="line">    <span class="number">2048</span> <span class="number">2048</span></span><br></pre></td></tr></table></figure>
<h2 id="访问图层和选择显示">访问图层和选择显示</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>front = Display.getFront()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>layer = front.getLayer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>layer_set = front.getLayerSet()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sel = front.getSelection()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> sel.getSelected().size()</span><br><span class="line">    <span class="number">10</span></span><br><span class="line">    &gt;&gt;&gt; <span class="built_in">print</span> sel.isEmpty()</span><br><span class="line">    <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<ol>
<li class="lvl-3">
<p><a href="https://imagej.net/plugins/trakem2/">https://imagej.net/plugins/trakem2/</a></p>
</li>
<li class="lvl-3">
<p>Cardona, A., Saalfeld, S., Schindelin, J., Arganda-Carreras, I., Preibisch, S., Longair, M., … Douglas, R. J. (2012). TrakEM2 Software for Neural Circuit Reconstruction. PLoS ONE, 7(6), e38011. doi:10.1371/journal.pone.0038011</p>
</li>
<li class="lvl-3">
<p><a href="https://syn.mrc-lmb.cam.ac.uk/acardona/INI-2008-2011/data.html">https://syn.mrc-lmb.cam.ac.uk/acardona/INI-2008-2011/data.html</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>ImageJ</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>ImageJ</tag>
        <tag>图像</tag>
        <tag>插件</tag>
        <tag>简介</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/05/09/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span> 
<h2 id="快速开始">快速开始</h2>
<h3 id="创建文章">创建文章</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="查看效果">查看效果</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态">生成静态</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到远程">部署到远程</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>默认</tag>
        <tag>你好</tag>
      </tags>
  </entry>
  <entry>
    <title>RNA-Seq Count数据的标准化(RPKM, FPKM, TPM)-学习笔记</title>
    <url>/2023/09/21/RNA-Seq%20Count%E6%95%B0%E6%8D%AE%E7%9A%84%E6%A0%87%E5%87%86%E5%8C%96(RPKM,%20FPKM,%20TPM)-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>测序得到的 <strong>read counts</strong> 数量会受到多种因素的影响，如 <strong>测序深度</strong> 和 <strong>基因长度</strong> 。除了上述两个主要因素外，还会有其他因素对read counts的检测有所影响，例如转录组的组成，GC含量，random hexamers引起的测序偏好等等。因此测序得到的read counts需要标准化后才能进行比较。标准化的方式有 <strong>RPKM</strong> ， <strong>FPKM</strong>， <strong>TPM</strong> 。其中TPM被更多人认可。</p>
<span id="more"></span> 
<p><strong>RPKM:</strong> Reads per kilo base per million mapped reads (single-end sequencing)</p>
<p><strong>FPKM:</strong> Fragments per kilo base per million mapped reads (paired-end sequencing)</p>
<p>RPKM与FPKM实际上一样的单位，只不过RPKM是在单端测序文库中使用，而FPKM是双端测序所用的。对基因长度（gene length）以及测序深度（mapped reads from library）都进行了校正。<br>
<img src="https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111816290.png" alt="公式1"></p>
<h3 id="RPKM，FPKM">RPKM，FPKM</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#x为一个向量存储了每个基因的counts，而gene.length是相应于x中每个基因的长度的一个向量.</span><br><span class="line">RPKM &lt;- function(x, gene.length)&#123; </span><br><span class="line">  lib.size &lt;- sum(x)</span><br><span class="line">  rpm &lt;- 1e6 * x/lib.size</span><br><span class="line">  rpkm &lt;- 1e3 * rpm/gene.length</span><br><span class="line">  return(rpkm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FPKM &lt;- function(x, gene.length)&#123; </span><br><span class="line">  lib.size &lt;- sum(x)</span><br><span class="line">  rpm &lt;- 1e6 * x/lib.size</span><br><span class="line">  rpkm &lt;- 1e3 * rpm/gene.length</span><br><span class="line">  return(fpkm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TPM">TPM</h3>
<p>TPM: Transcript per million<br>
<img src="https://thereallda.github.io/2022/01/24/%E7%90%86%E8%AE%BA-%E7%AE%80%E8%BF%B0RPKM-FPKM-AND-TPM/image-20220124111831499.png" alt="公式2"></p>
<p>TPM对基因的长度进行了校正，计算比对到基因上的reads/基因长度得到长度校正的表达量 reads per kilobase (RPK)。再以文库中RPK之和作为Scale Factor求出TPM。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TPM &lt;- function(x, gene.length)&#123;</span><br><span class="line">  rpk &lt;- 1e3 * x/gene.length</span><br><span class="line">  scale.factor &lt;- sum(rpk)</span><br><span class="line">  tpm &lt;- 1e6 * rpk/scale.factor</span><br><span class="line">  return(tpm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比于RPKM使用文库大小（read counts之和）来作为文库校正因子，TPM使用RPK之和作为文库校正因子的好处是考虑了不同样本间的基因长度的分布。因为RPK是一个对基因长度进行校正后的表达量单位，所以RPK之和也不会再带入基因长度的bias。因此，如果需要比较的样本之间转录本分布不一致时（例如不同物种RNA-seq的比较），使用TPM是一个较佳的normalization方案。</p>
<p>RPKM和TPM这类方法就是为了使不同样本间的总体表达量趋于一致，让不同样本间的基因表达量有可比较性，而TPM能够更好地校正样本间的差异。</p>
<p>常用的Normalization 方法总结</p>
<table>
<thead>
<tr>
<th>Normalization method</th>
<th>描述</th>
<th>考虑因素</th>
<th>使用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPM (counts per million)</td>
<td>使用read counts的总和校正counts</td>
<td>测序深度</td>
<td>同一样本组重复样本之间的基因counts比较；不适用于样品内的比较或差异分析</td>
</tr>
<tr>
<td>TPM (transcripts per kilobase million)</td>
<td>每百万mapped reads中每kb转录本上的reads数</td>
<td>测序深度和基因长度</td>
<td>样本内或同一样本组样本之间的基因counts比较； 不适用于差异分析</td>
</tr>
<tr>
<td>RPKM/FPKM (reads/fragments per kilobase of exon per million reads/fragments mapped)</td>
<td>如TPM</td>
<td>测序深度和基因长度</td>
<td>样本内基因间的counts比较; 不适用于样本间比较和差异分析</td>
</tr>
<tr>
<td>DESeq2’s median of ratios [1]</td>
<td>counts除以样本特异的校正因子，该因子由基因计数相对于每个基因的几何平均值的中位数比率确定</td>
<td>测序深度及RNA组成</td>
<td>样本之间的基因counts比较以及差异分析; 不适用于样本内比较</td>
</tr>
<tr>
<td>EdgeR’s trimmed mean of M values (TMM) [2]</td>
<td>使用样本之间的加权截尾的对数表达量比值的均值进行TMM校正</td>
<td>测序深度，RNA组成以及基因长度</td>
<td>样品之间和样品内部的基因counts比较，适用于差异分析</td>
</tr>
</tbody>
</table>
<p>在进行差异表达分析时，我们实际上并不会用到RPKM/FPKM, TPM，而是使用raw counts给到差异分析的工具。这是由于RPKM/FPKM和TPM都没有考虑到样本间文库组成的差异，因而不适合用于样本间差异分析。</p>
<h2 id="获取基因长度">获取基因长度</h2>
<p>计算TPM或RPKM/FPKM等基因表达量时，除了基因的counts信息外，我们还需要知道基因的长度。由于可变剪接的存在，一个基因可能会有多个转录本，在进行基因水平的表达分析时，我们并不会区分各个转录本剪接变体的表达量，而是以基因为单位进行统计。目前，对于基因长度有多种定义，包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>基因最长转录本；</p>
</li>
<li class="lvl-2">
<p>多个转录本长度的平均值；</p>
</li>
<li class="lvl-2">
<p>非重叠外显子长度之和：</p>
</li>
<li class="lvl-2">
<p>非重叠CDS序列长度之和。</p>
</li>
</ul>
<p><img src="https://thereallda.github.io/2022/02/07/R-Retrieve-Gene-Length/paste-CBFC7C07.png" alt="3"></p>
<p>Figure Source: Gene structure</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#使用gtf文件在R中获取基因长度（非重叠外显子长度之和）</span><br><span class="line">#首先，读取计算基因counts时用的GTF文件，并将其转换为TxDb对象；</span><br><span class="line">library(GenomicFeatures)</span><br><span class="line">#一般常用的物种基因注释信息都已经有人构建好TxDb对象，以R包的形式上传到Bioconductor里。我们使用时直接加载、赋值即可。BiocManager::install(&quot;TxDb.Dmelanogaster.UCSC.dm6.ensGene&quot;)</span><br><span class="line">#从本地读取数据库文件 txdb &lt;- makeTxDbFromGFF(&#x27;gencode.vM23.annotation.gtf&#x27;, format=&#x27;gtf&#x27;)</span><br><span class="line">#然后，提取每个基因的外显子注释信息；exons.list.per.gene &lt;- exonsBy(txdb, by=&quot;gene&quot;)</span><br><span class="line">library(TxDb.Dmelanogaster.UCSC.dm6.ensGene)</span><br><span class="line">exons.list.per.gene &lt;- exonsBy(TxDb.Dmelanogaster.UCSC.dm6.ensGene, by=&quot;gene&quot;)</span><br><span class="line">#最后，合并重叠的外显子，计算非重叠外显子的长度作为基因长度（bp）</span><br><span class="line">exonic.gene.sizes &lt;- sum(width(reduce(exons.list.per.gene)))</span><br></pre></td></tr></table></figure>
<p><code>GenomicFeatures</code>还支持自己手动从指定数据库中构建TxDb对象，例如从 UCSC提取构建的<code>makeTxDbFromUCSC()</code>函数；从BioMart提取构建的<code>makeTxDbFromBiomart()</code>函数等方法可以用作替补方案（没有对应TXDB的R包时）。</p>
<p><code>tureCounts</code>统计基因counts时，其输出的counts.txt文件中通常会包含一列长度信息Length。也是采用非重叠外显子作为基因长度。</p>
<h2 id="参考：">参考：</h2>
<ol>
<li class="lvl-3">
<p>理论-简述RPKM-FPKM-AND-TPM | Dean’s blog (<a href="http://thereallda.github.io">thereallda.github.io</a>)</p>
</li>
<li class="lvl-3">
<p>R-获取基因长度 | Dean’s blog (<a href="http://thereallda.github.io">thereallda.github.io</a>)</p>
</li>
<li class="lvl-3">
<p>[R]bioconductor之GenomicFeatures学习 - 简书 (<a href="http://jianshu.com">jianshu.com</a>)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>生信</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>RNA-seq</tag>
        <tag>生信</tag>
        <tag>R语言</tag>
      </tags>
  </entry>
  <entry>
    <title>从出生那天开始，你就是“局外人”</title>
    <url>/2024/05/10/%E4%BB%8E%E5%87%BA%E7%94%9F%E9%82%A3%E5%A4%A9%E5%BC%80%E5%A7%8B%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E2%80%9C%E5%B1%80%E5%A4%96%E4%BA%BA%E2%80%9D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1>你</h1>
<p>如果你是中国的90后，那你的出生就已经是个错误。这个错是谁跟你定的呢？谁管呢，谁让你赶在了这个糟糕的年代。</p>
<span id="more"></span>
<p>20世纪90年代正是计划生育实行最没“人性”的时代，你出生了。不是独生子，就是“计划外”。独生子的你以后要独自承担这个家，而计划外的你现在就要面临活下去的困难。好了，挨过了出生这道屏障。上小学到5年级，突然多了一个6年级。<br>
2003年，你又赶上了非典。接着又赶上了高考改革。后来你又赶上了考研公费取消。都这样了你还不死心考了博士，硕博的毕业条件一年比一年离谱，而教育水平似乎并没有改变。你迟迟没有毕业，等到的却是新冠肺炎。毕业条件提高，盲审条件提高，毕业难度加大。以后你将面临人口老龄化。这于你来说就是最糟糕的年代。你被抛弃之人，就没有家。却还要对这个屋檐感恩戴德。</p>
<hr>
<blockquote>
<p>智谱清言修改</p>
</blockquote>
<h1>90后的挑战与机遇</h1>
<h2 id="出生背景">出生背景</h2>
<p><strong>20世纪90年代的中国</strong>，你作为90后的一员，出生在一个社会变革的时期。计划生育政策在这一时期达到了严格的顶峰，你的出生或许被标记为“错误”，但这个“错误”并非由你造成，而是那个时代的社会环境所决定。作为独生子女，你将承担家庭的重任；若是“计划外”的孩子，你则面临更多的生存挑战。</p>
<h2 id="教育经历">教育经历</h2>
<p><strong>教育之路</strong>，从小学到五年级，教育体系的变化让你不得不适应新的六年级。2003年，非典疫情爆发，给你带来了关于生命和健康的新认知。随后，高考改革对你提出了新的要求，你需要适应新的考试制度和教育模式。</p>
<h2 id="高等教育">高等教育</h2>
<p><strong>高等教育的挑战</strong>，考研公费的取消增加了你的经济负担，但你仍选择继续深造，攻读硕士和博士学位。然而，毕业条件逐年提高，盲审制度变得更加严格，使得毕业难度不断加大。</p>
<h2 id="新冠肺炎疫情">新冠肺炎疫情</h2>
<p><strong>疫情的冲击</strong>，当你即将完成学业之际，新冠肺炎疫情爆发，就业市场急剧萎缩，你面临着更加激烈的竞争和不确定性。</p>
<h2 id="人口老龄化">人口老龄化</h2>
<p><strong>面对未来</strong>，中国正面临人口老龄化的挑战。随着生育率的下降和人口结构的变化，你需要在工作和生活中承担更多的责任，并为未来的养老问题做好准备。</p>
<h2 id="坚持与希望">坚持与希望</h2>
<p>在这个充满挑战的时代，90后似乎成了被抛弃的一代。然而，你们依然坚持着自己的梦想，努力寻找属于自己的位置。或许对现状感到不满，但你们明白，只有通过自己的努力，才能在这个不断变化的世界中找到属于自己的道路。</p>
<details open>
<summary><span class="pre-summary">&nbsp;</span><strong>修改前</strong></summary><p>在中国的90后，出生在一个特殊的历史时期，这个时期的社会变革和发展对他们的成长产生了深远的影响。20世纪90年代，中国实行了一项具有深远历史意义的人口政策——计划生育。这项政策旨在控制人口增长，提高人口素质，但由于其严格的实施方式，也引发了一系列社会问题。对于90后来说，他们的出生就伴随着这样的背景，这无疑是一个巨大的挑战。如果你是中国的90后，那么你的出生就已经是个错误。这个错误不是由你决定的，而是由那个时代的社会环境决定的。在当时，计划生育政策被视为控制人口增长的必要手段，但对于许多家庭来说，这却是一种痛苦的选择。如果你是独生子女，那么你将承担起家庭的重任，独自面对未来的挑战。如果你是“计划外”的孩子，那么你的出生将面临更多的困难和挑战，你可能需要为生存而奋斗。在度过了出生这道难关后，90后的孩子们开始接受教育。然而，他们又遇到了新的挑战。在上小学到5年级的过程中，突然多出了一个6年级。这一变化让许多学生感到困惑和不适，他们不得不适应新的教育体系。然而，这仅仅是他们成长过程中的一部分。<br>
2003年，中国爆发了非典疫情。这场突如其来的灾难对整个社会造成了巨大的冲击，也影响了90后的成长。他们不得不学会面对疾病和死亡，学会珍惜生命和健康。这场疫情也让人们意识到公共卫生的重要性，推动了中国医疗卫生体系的改革和发展。随着90后的成长，他们又迎来了高考改革。这一改革旨在减轻学生的学业压力，提高教育的公平性和质量。然而，对于90后来说，这又是一次挑战。他们需要适应新的考试制度和教育模式，努力提高自己的综合素质和能力。在经历了高考改革后，90后又迎来了考研公费的取消。这一政策变化使得研究生教育变得更加市场化，也增加了学生的经济负担。对于许多90后来说，这无疑是一个巨大的压力。他们需要为自己的未来付出更多的努力和汗水，才能实现自己的梦想。随着就业困难，物价疯涨，90后一代中很多的人选择继续深造，攻读硕士和博士学位。然而，他们发现，硕博的毕业条件逐年提高，盲审制度变得更加严格，毕业难度不断加大。这些变化对他们的学术生涯和心理健康都带来了巨大的压力。即便如此，他们依然坚持不懈地追求知识，希望能够在学术领域取得突破。然而，就在他们即将完成学业之际，新冠肺炎的爆发给了他们新的打击。疫情导致毕业生的就业市场急剧萎缩，许多行业受到重创，就业机会减少。对于即将步入社会的博士生来说，这意味着他们需要面对更加激烈的竞争和不确定性。与此同时，中国正面临着人口老龄化的严峻挑战。随着生育率的下降和人口结构的变化，年轻劳动力市场的供给将逐渐减少，而老年人口的比例将不断上升。这对于90后来说，不仅意味着他们需要在工作和生活中承担更多的责任，还意味着他们需要为未来的养老问题做好准备。在这个充满挑战的时代，90后似乎成了被抛弃的一代。他们不仅要应对现实的压力，还要为未来的不确定性做好准备。然而，他们依然坚持着自己的梦想，努力寻找属于自己的位置。他们或许对现状感到不满，但他们也明白，只有通过自己的努力，才能在这个不断变化的世界中找到属于自己的道路。</p>
</details>
]]></content>
      <categories>
        <category>活着</category>
      </categories>
      <tags>
        <tag>局外人</tag>
        <tag>随笔</tag>
        <tag>牢骚</tag>
        <tag>时代</tag>
      </tags>
  </entry>
  <entry>
    <title>爬取小说--战略级天使</title>
    <url>/2021/05/04/%E7%88%AC%E5%8F%96%E5%B0%8F%E8%AF%B4--%E6%88%98%E7%95%A5%E7%BA%A7%E5%A4%A9%E4%BD%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="目的">目的</h2>
<p>小说离线阅读,保存。练习R语言。示例网站：https://www.-----.com/yuedu/15111/</p>
<span id="more"></span> 
<h2 id="实例">实例</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">library(&quot;stringr&quot;)</span><br><span class="line">library(&quot;rvest&quot;)</span><br><span class="line">library(&#x27;RCurl&#x27;)</span><br><span class="line">library(&#x27;curl&#x27;)</span><br><span class="line">library(&#x27;downloader&#x27;)</span><br><span class="line">library(&#x27;RSelenium&#x27;)</span><br><span class="line">setwd(&#x27;H:\\R\\R脚本\\爬虫&#x27;)</span><br><span class="line">url &lt;- &quot;https://www.-----.com/yuedu/15111/&quot;</span><br><span class="line">htmlpage &lt;- read_html(url)</span><br><span class="line">xs_chapter &lt;- htmlpage %&gt;% html_nodes(&#x27;div#wrapper div.box_con div#list dl dd a&#x27;) %&gt;% html_text()</span><br><span class="line">head(xs_chapter)#观察数据形式</span><br><span class="line">xs_link &lt;- htmlpage %&gt;% html_nodes(&#x27;div#wrapper div.box_con div#list dl dd a&#x27;) %&gt;% html_attrs()</span><br><span class="line">head(xs_link)#观察数据形式</span><br><span class="line">xs_link &lt;- paste(&quot;https://www.-----.com&quot;,unlist(xs_link),sep = &#x27;&#x27;)#构建章节链接</span><br><span class="line">xs_content &lt;- cbind(xs_chapter[-(1:10)],xs_link[-(1:10)])#合并目录链接</span><br><span class="line"></span><br><span class="line">#尝试获取小说内容，并提取。</span><br><span class="line">ms_f1 &lt;- read_html(xs_content[1,2], encoding = &quot;GB18030&quot;) %&gt;% html_nodes(&#x27;div#content&#x27;) %&gt;% html_text()</span><br><span class="line">ms_f2 &lt;- read_html(xs_content[2,2], encoding = &quot;GB18030&quot;) %&gt;% html_nodes(&#x27;div#content&#x27;) %&gt;% html_text()</span><br><span class="line">ms_f &lt;- c(xs_content[1,1],ms_f1,xs_content[2,1],ms_f2)</span><br><span class="line">write(gsub(&quot;\u00A0&quot;,&quot; &quot;, ms_f),file = &quot;1.txt&quot;)</span><br><span class="line"></span><br><span class="line">#自定义下载函数</span><br><span class="line">xs_down &lt;- function(x)&#123;</span><br><span class="line">  xs &lt;- c()</span><br><span class="line">  for (i in 1:length(x[,1])) &#123;</span><br><span class="line">  xm &lt;- read_html(x[i,2], encoding = &quot;GB18030&quot;) %&gt;% html_nodes(&#x27;div#content&#x27;) %&gt;% html_text()</span><br><span class="line">  xs &lt;- c(xs, x[i,1], xm)</span><br><span class="line">  &#125;</span><br><span class="line">  xs</span><br><span class="line">&#125;</span><br><span class="line">#导出小说</span><br><span class="line">write(gsub(&quot;\u00A0&quot;,&quot; &quot;, xs_down(xs_content)),file = &quot;战略级天使.txt&quot;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>R语言</tag>
        <tag>爬虫</tag>
        <tag>小说</tag>
        <tag>实例</tag>
      </tags>
  </entry>
</search>
